module coproduct_set where

import proto_pi
import iso_sigma

upPath (X Y: U) (f: X -> Y) (al : X -> X): X -> Y = o X X Y f al
downPath (X Y: U) (f: X -> Y) (be: Y -> Y): X -> Y = o X Y Y be f
naturality (X Y: U) (al: X -> X) (be: Y -> Y) (f: X -> Y): U
  = Path (X -> Y) (upPath X Y f al) (downPath X Y f be)

unitEnc' : U = (X: U) -> isSet X -> X -> X
isUnitEnc (al: unitEnc'): U
  = (X Y: U) -> (proofX: isSet X) -> (proofY: isSet Y) -> (f: X -> Y) ->
    naturality X Y (al X proofX) (al Y proofY) f

unitEnc : U = (al : unitEnc') * isUnitEnc al
unitEncStar: unitEnc = (\(X: U) (_: isSet X) -> idfun X, \(X Y: U) (_: isSet X) (_: isSet Y)-> refl (X -> Y))
unitEncRec (C: U) (proofC: isSet C) (c: C): unitEnc -> C = \(z: unitEnc) -> z.1 C proofC c
unitEncBeta (C: U) (proofC: isSet C) (c: C): Path C (unitEncRec C proofC c unitEncStar) c = refl C c

-- lemma 2.4.4 preliminaries (implicit in the paper)
propUnitEncCondition (al: unitEnc')
  : isProp (isUnitEnc al)
  = lem6 where

  PP (X Y: U) (proofX: isSet X) (proofY: isSet Y) (f: X -> Y): U = naturality X Y (al X proofX) (al Y proofY) f

  lem1 (X Y: U) (proofX: isSet X) (proofY: isSet Y) (f: X -> Y): isProp (PP X Y proofX proofY f)
    = setFun X Y proofY (upPath X Y f (al X proofX)) (downPath X Y f (al Y proofY))
  lem2 (X Y: U) (proofX: isSet X) (proofY: isSet Y)
    : isProp                                                               ((f: X -> Y) -> PP X Y proofX proofY f)
    = propPi (X -> Y)                                                     (\(f: X -> Y) -> PP X Y proofX proofY f) (lem1 X Y proofX proofY)
  lem3 (X Y: U) (proofX: isSet X)
    : isProp                                          ((proofY: isSet Y) -> (f: X -> Y) -> PP X Y proofX proofY f)
    = propPi                               (isSet Y) (\(proofY: isSet Y) -> (f: X -> Y) -> PP X Y proofX proofY f) (lem2 X Y proofX)
  lem4 (X Y: U)
    : isProp                        ((proofX: isSet X) -> (proofY: isSet Y) (f: X -> Y) -> PP X Y proofX proofY f)
    = propPi             (isSet X) (\(proofX: isSet X) -> (proofY: isSet Y) (f: X -> Y) -> PP X Y proofX proofY f) (lem3 X Y)
  lem5 (X: U)
    : isProp              ((Y: U) -> (proofX: isSet X) -> (proofY: isSet Y) (f: X -> Y) -> PP X Y proofX proofY f)
    = propPi U           (\(Y: U) -> (proofX: isSet X) -> (proofY: isSet Y) (f: X -> Y) -> PP X Y proofX proofY f) (lem4 X)
  lem6
    : isProp (isUnitEnc al)
    = propPi U (\(X: U) -> (Y: U) -> (proofX: isSet X) -> (proofY: isSet Y) (f: X -> Y) -> PP X Y proofX proofY f) lem5

proofUnitEnc: isSet unitEnc = setSig unitEnc' isUnitEnc sA sB where
  sA : isSet unitEnc' = setPi U P goal where
    P (X: U): U = isSet X -> X -> X
    goal (X: U): isSet (P X) = setFun' (isSet X) (X -> X) (setFun X X)
  sB (al: unitEnc'): isSet (isUnitEnc al) = propSet (isUnitEnc al) (propUnitEncCondition al)

-- lemma 2.4.4
unitEncWeakEta (z: unitEnc): Path unitEnc (z.1 unitEnc proofUnitEnc unitEncStar) z
  = pathSig3 unitEnc' isUnitEnc alStar z (q,t) where
  al : unitEnc' = z.1
  p : isUnitEnc al = z.2

  alStar : unitEnc = al unitEnc proofUnitEnc unitEncStar
  alStarAl: unitEnc' = alStar.1
  alStarP: isUnitEnc alStarAl = alStar.2

  -- proposition 2.4.5
  q: Path unitEnc' alStarAl al = piExt U (\(X: U) -> isSet X -> X -> X) alStarAl al qqEtaEta where
    qq (X: U) (proofX: isSet X) (x: X): Path X (alStarAl X proofX x) (al X proofX x)
      = funExtInv unitEnc X ff gg pp unitEncStar where

      f  : unitEnc -> X = unitEncRec X proofX x
      ff : unitEnc -> X =   upPath unitEnc X f (al unitEnc proofUnitEnc)
      gg : unitEnc -> X = downPath unitEnc X f (al X proofX)
      pp : Path (unitEnc -> X) ff gg = p unitEnc X proofUnitEnc proofX (unitEncRec X proofX x)

    qqEta (X: U) (proofX: isSet X): Path (X -> X) (alStarAl X proofX) (al X proofX)
      = funExt X X (alStarAl X proofX) (al X proofX) (qq X proofX)

    qqEtaEta (X: U): Path (isSet X -> X -> X) (alStarAl X) (al X)
      = funExt (isSet X) (X -> X) (alStarAl X) (al X) (qqEta X)

  p' : Path U (isUnitEnc alStar.1) (isUnitEnc z.1) = mapOnPath unitEnc' U isUnitEnc alStar.1 z.1 q
  t: Path (isUnitEnc z.1) (transport p' alStar.2) p = proofP (transport p' alStarP) p where
    proofP : isProp (isUnitEnc al) = propUnitEncCondition al

unitEncEta (C: U) (proofC : isSet C) (f: unitEnc -> C): Path (unitEnc -> C) (unitEncRec C proofC (f unitEncStar)) f 
  = goal where
  fStar: C = f unitEncStar
  recfStar (z: unitEnc): C = z.1 C proofC fStar
  goal : Path (unitEnc -> C) recfStar f = undefined
  goal2 (z: unitEnc): Path C (z.1 C proofC fStar) (f (z.1 unitEnc proofUnitEnc unitEncStar)) = undefined

unitEncOnlyStar (z: unitEnc): Path unitEnc unitEncStar z = undefined

unitEncInd (P : unitEnc -> U) (aa: unitEnc): P unitEncStar -> P aa
  = subst unitEnc P unitEncStar aa (unitEncOnlyStar aa)
